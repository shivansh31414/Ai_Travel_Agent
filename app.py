import streamlit as st
import json
import requests
from datetime import date, timedelta
import os
from dotenv import load_dotenv # Import load_dotenv

# Load environment variables from .env file
load_dotenv()

# --- Core AI Travel Plan Generation Function ---
def generate_travel_plan_python(destination, start_date, end_date, budget, interests, num_travelers, travel_style):
    """
    Generates a detailed travel plan using the Gemini API.

    Args:
        destination (str): The desired travel destination.
        start_date (str): The start date of the trip (YYYY-MM-DD).
        end_date (str): The end date of the trip (YYYY-MM-DD).
        budget (str): The budget for the trip (e.g., "2000 USD").
        interests (list): A list of user interests (e.g., ["culture", "food"]).
        num_travelers (int): The number of travelers.
        travel_style (str): The preferred travel style (e.g., "mid-range", "luxury").

    Returns:
        str: A detailed travel itinerary or an error message.
    """
    prompt = f"""Act as an AI Travel Agent. I want to plan a trip with the following details:
    Destination: {destination}
    Dates: {start_date} to {end_date}
    Budget: {budget} USD
    Interests: {', '.join(interests) if interests else 'No specific interests'}
    Number of Travelers: {num_travelers}
    Travel Style: {travel_style}

    Please provide a detailed travel itinerary including daily activities, recommended accommodations, estimated costs, and local tips. Be creative and practical. Format the response clearly with headings for each section (e.g., "Overview", "Daily Itinerary", "Accommodation", "Estimated Costs", "Local Tips")."""

    chat_history = [{"role": "user", "parts": [{"text": prompt}]}]
    payload = {"contents": chat_history}

    # Retrieve API key from environment variables
    # This will look for a variable named 'GEMINI_API_KEY' in your .env file
    api_key = os.getenv("GEMINI_API_KEY")

    if not api_key:
        return "API key not found. Please set GEMINI_API_KEY in your .env file."

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

    try:
        response = requests.post(api_url, headers={'Content-Type': 'application/json'}, data=json.dumps(payload))
        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)

        result = response.json()

        if result.get("candidates") and len(result["candidates"]) > 0 and \
           result["candidates"][0].get("content") and \
           result["candidates"][0]["content"].get("parts") and \
           len(result["candidates"][0]["content"]["parts"]) > 0:
            return result["candidates"][0]["content"]["parts"][0]["text"]
        else:
            return "Could not generate a travel plan. Unexpected API response structure."
    except requests.exceptions.RequestException as e:
        return f"Failed to connect to Gemini API: {e}"
    except json.JSONDecodeError:
        return "Failed to parse API response. Invalid JSON."
    except Exception as e:
        return f"An unexpected error occurred: {e}"

# --- Streamlit Application Layout ---
st.set_page_config(
    page_title="AI Travel Agent",
    page_icon="✈️",
    layout="centered",
    initial_sidebar_state="auto"
)

st.title("✈️ AI Travel Agent")
st.markdown("Plan your dream trip with personalized itineraries generated by AI.")

# Input fields
st.header("Plan Your Trip")

col1, col2 = st.columns(2)

with col1:
    destination = st.text_input("Destination", placeholder="e.g., Paris, Tokyo, Grand Canyon")
    num_travelers = st.number_input("Number of Travelers", min_value=1, value=1, step=1)
    # Default dates for convenience
    today = date.today()
    default_start_date = today
    default_end_date = today + timedelta(days=7)
    start_date = st.date_input("Start Date", value=default_start_date)

with col2:
    budget = st.number_input("Budget (USD)", min_value=0, value=2000, step=100)
    travel_style = st.selectbox(
        "Travel Style",
        ("mid-range", "budget", "luxury", "adventure", "relaxation")
    )
    end_date = st.date_input("End Date", value=default_end_date)


st.subheader("Interests")
interest_options = ['Culture', 'Adventure', 'Food', 'Relaxation', 'Nature', 'Shopping', 'History', 'Nightlife']
selected_interests = st.multiselect("Select your interests:", interest_options)
# Convert selected interests to lowercase for the model
interests_for_model = [interest.lower() for interest in selected_interests]

# Generate button
if st.button("Generate Travel Plan", type="primary"):
    if not destination or not start_date or not end_date or not budget:
        st.error("Please fill in all required fields (Destination, Dates, Budget).")
    elif start_date > end_date:
        st.error("End Date cannot be before Start Date.")
    else:
        with st.spinner("Generating your personalized travel plan... This may take a moment."):
            # Format dates to YYYY-MM-DD strings
            formatted_start_date = start_date.strftime("%Y-%m-%d")
            formatted_end_date = end_date.strftime("%Y-%m-%d")

            travel_plan = generate_travel_plan_python(
                destination,
                formatted_start_date,
                formatted_end_date,
                str(budget), # Ensure budget is a string as expected by the function
                interests_for_model,
                num_travelers,
                travel_style
            )

            if "Failed to" in travel_plan or "Could not" in travel_plan or "API key not found" in travel_plan:
                st.error(travel_plan)
            else:
                st.subheader("Your Personalized Travel Plan")
                # Streamlit's markdown handles basic formatting well
                st.markdown(travel_plan)

st.markdown("---")
st.write("Powered by Google Gemini ⚡")
